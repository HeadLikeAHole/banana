// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE
    users
SET
    is_active = 1, activation_token = NULL, activation_expiration = NULL
WHERE
    activation_token = ?
`

func (q *Queries) ActivateUser(ctx context.Context, activationToken sql.NullString) error {
	_, err := q.db.ExecContext(ctx, activateUser, activationToken)
	return err
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO
    users (email, password, activation_token, activation_expiration)
VALUES
    (?, ?, ?, ?)
`

type CreateUserParams struct {
	Email                string
	Password             string
	ActivationToken      sql.NullString
	ActivationExpiration sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.ActivationToken,
		arg.ActivationExpiration,
	)
}

const getUserByActivationToken = `-- name: GetUserByActivationToken :one
SELECT id, email, password, first_name, last_name, access_level, is_active, activation_token, activation_expiration, password_reset_token, password_reset_expiration, created_at, updated_at FROM
    users
WHERE
    activation_token = ?
`

func (q *Queries) GetUserByActivationToken(ctx context.Context, activationToken sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByActivationToken, activationToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.AccessLevel,
		&i.IsActive,
		&i.ActivationToken,
		&i.ActivationExpiration,
		&i.PasswordResetToken,
		&i.PasswordResetExpiration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, first_name, last_name, access_level, is_active, activation_token, activation_expiration, password_reset_token, password_reset_expiration, created_at, updated_at FROM
    users
WHERE
    email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.AccessLevel,
		&i.IsActive,
		&i.ActivationToken,
		&i.ActivationExpiration,
		&i.PasswordResetToken,
		&i.PasswordResetExpiration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, first_name, last_name, access_level, is_active, activation_token, activation_expiration, password_reset_token, password_reset_expiration, created_at, updated_at FROM
    users
WHERE
    id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.AccessLevel,
		&i.IsActive,
		&i.ActivationToken,
		&i.ActivationExpiration,
		&i.PasswordResetToken,
		&i.PasswordResetExpiration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPasswordResetToken = `-- name: GetUserByPasswordResetToken :one
SELECT id, email, password, first_name, last_name, access_level, is_active, activation_token, activation_expiration, password_reset_token, password_reset_expiration, created_at, updated_at FROM
    users
WHERE
    password_reset_token = ?
`

func (q *Queries) GetUserByPasswordResetToken(ctx context.Context, passwordResetToken sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPasswordResetToken, passwordResetToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.AccessLevel,
		&i.IsActive,
		&i.ActivationToken,
		&i.ActivationExpiration,
		&i.PasswordResetToken,
		&i.PasswordResetExpiration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setPasswordResetToken = `-- name: SetPasswordResetToken :exec
UPDATE
    users
SET
    password_reset_token = ?, password_reset_expiration = ?
WHERE
    email = ?
`

type SetPasswordResetTokenParams struct {
	PasswordResetToken      sql.NullString
	PasswordResetExpiration sql.NullTime
	Email                   string
}

func (q *Queries) SetPasswordResetToken(ctx context.Context, arg SetPasswordResetTokenParams) error {
	_, err := q.db.ExecContext(ctx, setPasswordResetToken, arg.PasswordResetToken, arg.PasswordResetExpiration, arg.Email)
	return err
}

const setUserPassword = `-- name: SetUserPassword :exec
UPDATE
    users
SET
    password = ?, password_reset_token = NULL, password_reset_expiration = NULL
WHERE
    password_reset_token = ?
`

type SetUserPasswordParams struct {
	Password           string
	PasswordResetToken sql.NullString
}

func (q *Queries) SetUserPassword(ctx context.Context, arg SetUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, setUserPassword, arg.Password, arg.PasswordResetToken)
	return err
}
